ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
} else {
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
mutate(obs = y,
bin = cut(x,
breaks = num_bins),
labels = F, include.lowest=T)) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
}
logodds_table %>%
ggplot(aes(x = mean_x,
y = logodds)) +
geom_point(size=2) +
geom_smooth(se=F, method="lm", formula = reg_formula) +
theme_bw() +
labs(x = x,
y = "Empirical log odds") +
theme(text = element_text(size=20))
}
logodds_plot <- function(data, num_bins, bin_method,
x, y, reg_formula = y ~ x){
if(bin_method == "equal_size"){
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
mutate(obs = y,
bin = cut(x,
breaks = quantile(x,
seq(0, 1,
length.out=(num_bins+1))),
labels = F, include.lowest=T)) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
} else {
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
mutate(obs = y,
bin = cut(x,
breaks = num_bins),
labels = F, include.lowest=T) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
}
logodds_table %>%
ggplot(aes(x = mean_x,
y = logodds)) +
geom_point(size=2) +
geom_smooth(se=F, method="lm", formula = reg_formula) +
theme_bw() +
labs(x = x,
y = "Empirical log odds") +
theme(text = element_text(size=20))
}
logodds_plot(titanic_train, 30, "equal_size", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot(titanic_train, 15, "equal_width", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot(titanic_train, 10, "equal_width", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot <- function(data, num_bins, bin_method,
x, y, reg_formula = y ~ x){
if(bin_method == "equal_size"){
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
mutate(obs = y,
bin = cut(x,
breaks = quantile(x,
seq(0, 1,
length.out=(num_bins+1))),
labels = F, include.lowest=T)) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
} else {
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
mutate(obs = y,
bin = cut(x,
breaks = num_bins,
labels = F, include.lowest=T)) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
}
logodds_table %>%
ggplot(aes(x = mean_x,
y = logodds)) +
geom_point(size=2) +
geom_smooth(se=F, method="lm", formula = reg_formula) +
theme_bw() +
labs(x = x,
y = "Empirical log odds") +
theme(text = element_text(size=20))
}
logodds_plot(titanic_train, 10, "equal_width", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot <- function(data, num_bins, bin_method,
x, y, reg_formula = y ~ x){
if(bin_method == "equal_size"){
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
mutate(obs = y,
bin = cut(x,
breaks = quantile(x,
seq(0, 1,
length.out=(num_bins+1))),
labels = F, include.lowest=T)) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
} else {
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
mutate(obs = y,
bin = cut(x,
breaks = num_bins,
labels = F)) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
}
logodds_table %>%
ggplot(aes(x = mean_x,
y = logodds)) +
geom_point(size=2) +
geom_smooth(se=F, method="lm", formula = reg_formula) +
theme_bw() +
labs(x = x,
y = "Empirical log odds") +
theme(text = element_text(size=20))
}
logodds_plot(titanic_train, 10, "equal_width", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
mutate(obs = y,
bin = cut(x,
breaks = num_bins,
labels = F)) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
logodds_table
logodds_plot(titanic_train, 8, "equal_width", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot(titanic_train, 5, "equal_width", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot(titanic_train, 10, "equal_width", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot(titanic_train, 15, "equal_width", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot(titanic_train, 20, "equal_width", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot(titanic_train, 25, "equal_width", "Fare", "Survived",
reg_formula = y ~ log(x))
nrow(titanic_data)/30
nrow(titanic_train)/30
rep(1:5, each = 29.7)
length(rep(1:5, each = 29.7))
29.7*5
length(rep(1:5, each = ceil(29.7)))
length(rep(1:5, each = ceiling(29.7)))
logodds_plot <- function(data, num_bins, bin_method,
x, y, reg_formula = y ~ x){
if(bin_method == "equal_size"){
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
arrange(x) %>%
mutate(obs = y,
bin = rep(1:num_bins,
each=nrow(data))[1:nrow(data)]) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
} else {
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
mutate(obs = y,
bin = cut(x,
breaks = num_bins,
labels = F)) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
}
logodds_table %>%
ggplot(aes(x = mean_x,
y = logodds)) +
geom_point(size=2) +
geom_smooth(se=F, method="lm", formula = reg_formula) +
theme_bw() +
labs(x = x,
y = "Empirical log odds") +
theme(text = element_text(size=20))
}
logodds_plot(titanic_train, 25, "equal_size", "Fare", "Survived",
reg_formula = y ~ log(x))
num_bins = 15
data = titanic_train
x = "Fare"
y = "Survived"
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
arrange(x) %>%
mutate(obs = y,
bin = rep(1:num_bins,
each=nrow(data))[1:nrow(data)]) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
logodds_table
data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
arrange(x) %>%
mutate(obs = y,
bin = rep(1:num_bins,
each=nrow(data))[1:nrow(data)])
logodds_plot <- function(data, num_bins, bin_method,
x, y, reg_formula = y ~ x){
if(bin_method == "equal_size"){
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
arrange(x) %>%
mutate(obs = y,
bin = rep(1:num_bins,
each=ceiling(nrow(data)/num_bins))[1:nrow(data)]) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
} else {
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
mutate(obs = y,
bin = cut(x,
breaks = num_bins,
labels = F)) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
}
logodds_table %>%
ggplot(aes(x = mean_x,
y = logodds)) +
geom_point(size=2) +
geom_smooth(se=F, method="lm", formula = reg_formula) +
theme_bw() +
labs(x = x,
y = "Empirical log odds") +
theme(text = element_text(size=20))
}
logodds_plot(titanic_train, 25, "equal_size", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot(titanic_train, 30, "equal_size", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot(titanic_train, 35, "equal_size", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot(titanic_train, 37, "equal_size", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot(titanic_train, 45, "equal_size", "Fare", "Survived",
reg_formula = y ~ log(x))
logodds_plot(titanic_train, 45, "equal_size", "Fare", "Survived",
reg_formula = y ~ poly(x, 2))
logodds_plot(titanic_train, 45, "equal_size", "Fare", "Survived",
reg_formula = y ~ poly(x, 3))
logodds_plot(titanic_train, 45, "equal_size", "Fare", "Survived",
reg_formula = y ~ sqrt(x))
logodds_plot(titanic_train, 45, "equal_size", "Fare", "Survived",
reg_formula = y ~ log(x))
891/15
logodds_plot(titanic_train, 30, "equal_size", "Fare", "Survived",
reg_formula = y ~ x)
min(titanic_train$Fare)
?titanic_train
titanic <- read.csv("https://sta279-s22.github.io/labs/Titanic.csv")
View(titanic)
titanic %>% drop_na()
titanic %>%
count(Survived) %>%
knitr::kable(caption="...")
logodds_plot <- function(data, num_bins, bin_method,
x, y, reg_formula = y ~ x){
if(bin_method == "equal_size"){
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
arrange(x) %>%
mutate(obs = y,
bin = rep(1:num_bins,
each=ceiling(nrow(data)/num_bins))[1:nrow(data)]) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
} else {
logodds_table <- data.frame(x = data[,x],
y = data[,y]) %>%
drop_na() %>%
mutate(obs = y,
bin = cut(x,
breaks = num_bins,
labels = F)) %>%
group_by(bin) %>%
summarize(mean_x = mean(x),
prop = mean(c(obs, 0.5)),
num_obs = n()) %>%
ungroup() %>%
mutate(logodds = log(prop/(1 - prop)))
}
logodds_table %>%
ggplot(aes(x = mean_x,
y = logodds)) +
geom_point(size=2) +
geom_smooth(se=F, method="lm", formula = reg_formula) +
theme_bw() +
labs(x = x,
y = "Empirical log odds") +
theme(text = element_text(size=20))
}
logodds_plot(titanic, 30, "equal_size", "Fare", "Survived",
reg_formula = y ~ x)
logodds_plot(titanic, 30, "equal_size", "Fare", "Survived",
reg_formula = y ~ log(x))
knitr::opts_chunk$set(echo = TRUE)
library(Stat2Data)
library(tidyverse)
data(Sparrows)
est_intercept = 1
est_slope = 1
# plot
Sparrows %>%
ggplot(aes(x = Weight, y = WingLength)) +
geom_point() +
geom_abline(intercept = est_intercept,
slope = est_slope,
color = "blue",
lwd = 1.5)
# calculate sum of squared residuals
Sparrows %>%
mutate(prediction = est_intercept + est_slope*Weight,
residual = WingLength - prediction) %>%
summarize(sum_sq_resid = sum(residual^2))
lm(WingLength ~ Weight, data = Sparrows)
setwd("~/Documents/Research/bryozoan-data-paper")
library(tidyverse)
library(lme4)
library(lmerTest)
library(RLRsim)
library(latex2exp)
metab <- read_csv("bryozoan_raw.csv")
metab_b <- metab[,1:4]
metab_w <- metab[,5:8]
colnames(metab_b) <- c("Stage", "Run", "Mass", "Metabolic")
colnames(metab_w) <- c("Stage", "Run", "Mass", "Metabolic")
metab_b <- metab_b %>%
mutate(Species = "bugula")
metab_w <- metab_w %>%
mutate(Species = "watersipora")
bryozoan <- metab_b %>%
rbind(metab_w) %>%
drop_na() %>%
mutate(Mass = 10^Mass,
Metabolic = 10^Metabolic,
Stage = tolower(Stage)) %>%
select(Species, Run, Stage, Mass, Metabolic) %>%
arrange(Species, Run, Stage) %>%
mutate(Run = cumsum(c(1, diff(Run) != 0)))
# fixing errors
bugula_early_mass <- bryozoan %>%
filter(Species == "bugula",
Stage == "early") %>%
pull(Mass)
bryozoan$Mass[bryozoan$Mass < 1] <- bugula_early_mass
dim(bryozoan)
# Number of individuals
bryozoan %>%
filter(Stage != "late") %>%
nrow()
write_csv(bryozoan, file="bryozoan_data_fixed.csv")
setwd("~/Documents/Teaching/sta112-s22.github.io/homework")
bugula_early <- bryozoan %>% filter(Species == "bugula", Stage == "early")
bugula_early_lm <- lm(Metabolic ~ Mass, data = bugula_early)
residuals(bugula_early_lm)
bugula_early %>%
mutate(yhat = predict(bugula_early_lm),
residuals = residuals(bugula_early_lm)) %>%
ggplot(aes(x = yhat, y = residuals)) +
geom_point() +
geom_abline(slope = 0, intercept = 0, lwd=1.5, color="blue") +
labs(x = "Predicted Metabolic rate", y = "Residuals") +
theme_bw()
plot(bugula_early$Mass, bugula_early$Metabolic)
bryozoan <- read_csv("https://sta112-s22.github.io/homework/bryozoan_data.csv")
dim(bryozoan)
bryozoan <- read_csv("https://sta112-s22.github.io/homework/bryozoan_data.csv")
dim(titanic %>% drop_na)
dim(titanic %>% drop_na())
sum(is.na(titanic$Cabin))
View(titanic)
head(titanic$Cabin)
titanic <- read.csv("https://sta279-s22.github.io/labs/Titanic.csv")
titanic <- titanci %>% drop_na()
titanic <- titanic %>% drop_na()
glm(Survived ~ log(Fare), family=binomial, data = titanic)
min(titanic$Fare)
glm(Survived ~ I(Fare) + I(Fare^2), family=binomial, data = titanic)
glm(Survived ~ ploy(Fare, 2), family=binomial, data = titanic)
glm(Survived ~ poly(Fare, 2), family=binomial, data = titanic)
?poly
exp(0.54)
exp(-0.61)
528.74*2
sparrow_lm <- lm(Weight ~ WingLength, data = Sparrows)
summary(sparrow_lm)
sparrow_lm <- lm(WingLength ~ Weight, data = Sparrows)
summary(sparrow_lm)
1.313/0.098
1.313/0.0976
pt(13.463, df = 114, lower.tail = FALSE)
1.313 - 2.62*0.0976
1.313 + 2.62*0.0976
grad_app <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
grad_glm <- glm(admit ~ gpa, data = grad_app, family=binomial)
summary(grad_glm)
grad_glm <- glm(admit ~ gre, data = grad_app, family=binomial)
summary(grad_glm)
grad_glm <- glm(admit ~ gre, data = grad_app,
family=binomial)
summary(grad_glm)
499.98 - 486.06
summary(grad_glm)
summary(grad_glm)
0.00358 - 1.96*0.00099
0.00358 + 1.96*0.00099
exp(0.0016)
exp(0.0055)
grad_glm <- glm(admit ~ gpa, data = grad_app, family=binomial)
summary(grad_glm)
499.98 - 486.97
pchisq(13.01, df=1, lower.tail=F)
pnorm(0.5, lower.tail = F)
grad_glm <- glm(admit ~ gpa, data = grad_app, family=binomial)
summary(grad_glm)
1.05 + 1.96 * 0.2989
1.05 - 1.96 * 0.2989
sparrow_lm <- lm(WingLength ~ Weight, data = Sparrows)
summary(sparrow_lm)
qt(0.005, df = 114, lower.tail = FALSE)
summary(grad_glm)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp('~/Documents/Teaching/regression_app')
